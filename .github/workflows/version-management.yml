name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

jobs:
  version-bump:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Get current version
      id: current-version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "CURRENT_VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Calculate new version
      id: new-version
      run: |
        CURRENT=${{ steps.current-version.outputs.CURRENT_VERSION }}
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
        else
          TYPE="${{ github.event.inputs.version_type }}"
          
          # Remove -SNAPSHOT if present
          CLEAN_VERSION=${CURRENT%-SNAPSHOT}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CLEAN_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $TYPE in
            major)
              NEW_VERSION=$((MAJOR + 1)).0.0
              ;;
            minor)
              NEW_VERSION=$MAJOR.$((MINOR + 1)).0
              ;;
            patch)
              NEW_VERSION=$MAJOR.$MINOR.$((PATCH + 1))
              ;;
          esac
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
    
    - name: Update version
      run: |
        echo "Updating version to ${{ steps.new-version.outputs.NEW_VERSION }}..."
        ./scripts/update-version.sh ${{ steps.new-version.outputs.NEW_VERSION }}
    
    - name: Build and test
      run: |
        mvn clean compile test
        mvn clean package -DskipTests
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Bump version to ${{ steps.new-version.outputs.NEW_VERSION }}"
        git push
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "Version bump to ${{ steps.new-version.outputs.NEW_VERSION }}"
        body: |
          ## Version Bump
          
          This PR bumps the version from `${{ steps.current-version.outputs.CURRENT_VERSION }}` to `${{ steps.new-version.outputs.NEW_VERSION }}`.
          
          ### Changes Made
          - Updated `pom.xml` version
          - Updated scripts to reference new version
          - Updated documentation with new version
          
          ### Next Steps
          - Review and merge this PR
          - Create a release tag: `git tag -a v${{ steps.new-version.outputs.NEW_VERSION }} -m "Release version ${{ steps.new-version.outputs.NEW_VERSION }}"`
          - Push the tag: `git push origin v${{ steps.new-version.outputs.NEW_VERSION }}`
          - Create GitHub release from the tag
          - Publish to Maven Central
        branch: version-bump-${{ steps.new-version.outputs.NEW_VERSION }}
        delete-branch: true
